# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_EAC3D_module')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_EAC3D_module')
    _EAC3D_module = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EAC3D_module', [dirname(__file__)])
        except ImportError:
            import _EAC3D_module
            return _EAC3D_module
        try:
            _mod = imp.load_module('_EAC3D_module', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _EAC3D_module = swig_import_helper()
    del swig_import_helper
else:
    import _EAC3D_module
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

TID = _EAC3D_module.TID
HID = _EAC3D_module.HID
rD = _EAC3D_module.rD
STRAINID = _EAC3D_module.STRAINID
STRESSID = _EAC3D_module.STRESSID
BND_DIR = _EAC3D_module.BND_DIR
BND_NEU = _EAC3D_module.BND_NEU
BND_CON = _EAC3D_module.BND_CON
scalar = _EAC3D_module.scalar
class EAC3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EAC3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EAC3D, name)
    __repr__ = _swig_repr

    def __init__(self, Lx, Ly, Lz, nx, ny, nz):
        this = _EAC3D_module.new_EAC3D(Lx, Ly, Lz, nx, ny, nz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _EAC3D_module.delete_EAC3D
    __del__ = lambda self: None

    def set_T_BNDXS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDXS(self, bnd, bnd_type)

    def set_T_BNDXF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDXF(self, bnd, bnd_type)

    def set_T_BNDYS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDYS(self, bnd, bnd_type)

    def set_T_BNDYF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDYF(self, bnd, bnd_type)

    def set_T_BNDZS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDZS(self, bnd, bnd_type)

    def set_T_BNDZF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_T_BNDZF(self, bnd, bnd_type)

    def set_H_BNDXS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDXS(self, bnd, bnd_type)

    def set_H_BNDXF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDXF(self, bnd, bnd_type)

    def set_H_BNDYS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDYS(self, bnd, bnd_type)

    def set_H_BNDYF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDYF(self, bnd, bnd_type)

    def set_H_BNDZS(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDZS(self, bnd, bnd_type)

    def set_H_BNDZF(self, bnd, bnd_type):
        return _EAC3D_module.EAC3D_set_H_BNDZF(self, bnd, bnd_type)

    def set_DStrainODH(self, func):
        return _EAC3D_module.EAC3D_set_DStrainODH(self, func)

    def set_DStrainODT(self, func):
        return _EAC3D_module.EAC3D_set_DStrainODT(self, func)

    def set_Restrain(self, func_restrain):
        return _EAC3D_module.EAC3D_set_Restrain(self, func_restrain)

    def set_Relaxation(self, func_J_relax):
        return _EAC3D_module.EAC3D_set_Relaxation(self, func_J_relax)

    def set_T_lambda(self, DiffusionCoef):
        return _EAC3D_module.EAC3D_set_T_lambda(self, DiffusionCoef)

    def set_H_lambda(self, DiffusionCoef):
        return _EAC3D_module.EAC3D_set_H_lambda(self, DiffusionCoef)

    def set_rho(self, val):
        return _EAC3D_module.EAC3D_set_rho(self, val)

    def set_cp(self, val):
        return _EAC3D_module.EAC3D_set_cp(self, val)

    def saveData(self, s, bnd_id):
        return _EAC3D_module.EAC3D_saveData(self, s, bnd_id)

    def saveMesh(self):
        return _EAC3D_module.EAC3D_saveMesh(self)

    def set_dt(self, dt):
        return _EAC3D_module.EAC3D_set_dt(self, dt)

    def timeMarching(self, onlyRK2):
        return _EAC3D_module.EAC3D_timeMarching(self, onlyRK2)

    def init_field(self, init, bnd_id):
        return _EAC3D_module.EAC3D_init_field(self, init, bnd_id)

    def set_NBEquations(self, NBEQ):
        return _EAC3D_module.EAC3D_set_NBEquations(self, NBEQ)

    def implicitTimeMarching(self, CN_factor, nbIter):
        return _EAC3D_module.EAC3D_implicitTimeMarching(self, CN_factor, nbIter)

    def computeStrainStress(self):
        return _EAC3D_module.EAC3D_computeStrainStress(self)

    def set_T_BNDXS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDXS(self, bnd_ptr, bnd_type)

    def set_T_BNDXF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDXF(self, bnd_ptr, bnd_type)

    def set_T_BNDYS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDYS(self, bnd_ptr, bnd_type)

    def set_T_BNDYF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDYF(self, bnd_ptr, bnd_type)

    def set_T_BNDZS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDZS(self, bnd_ptr, bnd_type)

    def set_T_BNDZF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_T_BNDZF(self, bnd_ptr, bnd_type)

    def set_T_lambda_py(self, DCoef):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
        DCoef_py = py_callback_type(DCoef)
        DCoef_ptr = ctypes.cast(DCoef_py, ctypes.c_void_p).value
        return EAC3D.set_T_lambda(self, DCoef_ptr)

    def set_H_BNDXS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDXS(self, bnd_ptr, bnd_type)

    def set_H_BNDXF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDXF(self, bnd_ptr, bnd_type)

    def set_H_BNDYS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDYS(self, bnd_ptr, bnd_type)

    def set_H_BNDYF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDYF(self, bnd_ptr, bnd_type)

    def set_H_BNDZS_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDZS(self, bnd_ptr, bnd_type)

    def set_H_BNDZF_py(self, bnd, bnd_type):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double,ctypes.c_double)
        bnd_py = py_callback_type(bnd)
        bnd_ptr = ctypes.cast(bnd_py, ctypes.c_void_p).value
        return EAC3D.set_H_BNDZF(self, bnd_ptr, bnd_type)

    def set_H_lambda_py(self, DCoef):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
        DCoef_py = py_callback_type(DCoef)
        DCoef_ptr = ctypes.cast(DCoef_py, ctypes.c_void_p).value
        return EAC3D.set_H_lambda(self, DCoef_ptr)

    def init_field_py(self, init, bnd_id):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double)
        init_py = py_callback_type(init)
        init_ptr = ctypes.cast(init_py, ctypes.c_void_p).value
        return EAC3D.init_field(self, init_ptr, bnd_id)
    def set_DStrainODH_py(self, func):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
        func_py = py_callback_type(func)
        func_ptr = ctypes.cast(func_py, ctypes.c_void_p).value
        return EAC3D.set_DStrainODH(self, func_ptr)
    def set_DStrainODT_py(self, func):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
        func_py = py_callback_type(func)
        func_ptr = ctypes.cast(func_py, ctypes.c_void_p).value
        return EAC3D.set_DStrainODT(self, func_ptr)

    def set_Restrain_py(self, func):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double,ctypes.c_double,ctypes.c_double)
        func_py = py_callback_type(func)
        func_ptr = ctypes.cast(func_py, ctypes.c_void_p).value
        return EAC3D.set_Restrain(self, func_ptr)
    def set_Relaxation_py(self, func):
        import ctypes
        py_callback_type = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)
        func_py = py_callback_type(func)
        func_ptr = ctypes.cast(func_py, ctypes.c_void_p).value
        return EAC3D.set_Relaxation(self, func_ptr)

EAC3D_swigregister = _EAC3D_module.EAC3D_swigregister
EAC3D_swigregister(EAC3D)

# This file is compatible with both classic and new-style classes.


